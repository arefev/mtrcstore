// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/agent/service/report.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	runtime "runtime"

	service "github.com/arefev/mtrcstore/internal/agent/service"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// ClearCounter mocks base method.
func (m *MockStorage) ClearCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearCounter")
}

// ClearCounter indicates an expected call of ClearCounter.
func (mr *MockStorageMockRecorder) ClearCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCounter", reflect.TypeOf((*MockStorage)(nil).ClearCounter))
}

// GetCounters mocks base method.
func (m *MockStorage) GetCounters() map[string]service.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounters")
	ret0, _ := ret[0].(map[string]service.Counter)
	return ret0
}

// GetCounters indicates an expected call of GetCounters.
func (mr *MockStorageMockRecorder) GetCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounters", reflect.TypeOf((*MockStorage)(nil).GetCounters))
}

// GetGauges mocks base method.
func (m *MockStorage) GetGauges() map[string]service.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauges")
	ret0, _ := ret[0].(map[string]service.Gauge)
	return ret0
}

// GetGauges indicates an expected call of GetGauges.
func (mr *MockStorageMockRecorder) GetGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauges", reflect.TypeOf((*MockStorage)(nil).GetGauges))
}

// IncrementCounter mocks base method.
func (m *MockStorage) IncrementCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementCounter")
}

// IncrementCounter indicates an expected call of IncrementCounter.
func (mr *MockStorageMockRecorder) IncrementCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCounter", reflect.TypeOf((*MockStorage)(nil).IncrementCounter))
}

// Save mocks base method.
func (m *MockStorage) Save(memStats *runtime.MemStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", memStats)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStorageMockRecorder) Save(memStats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), memStats)
}

// SaveCPU mocks base method.
func (m *MockStorage) SaveCPU() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCPU")
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCPU indicates an expected call of SaveCPU.
func (mr *MockStorageMockRecorder) SaveCPU() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCPU", reflect.TypeOf((*MockStorage)(nil).SaveCPU))
}

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// DoRequest mocks base method.
func (m *MockSender) DoRequest(url string, headers map[string]string, body any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRequest", url, headers, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoRequest indicates an expected call of DoRequest.
func (mr *MockSenderMockRecorder) DoRequest(url, headers, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRequest", reflect.TypeOf((*MockSender)(nil).DoRequest), url, headers, body)
}
